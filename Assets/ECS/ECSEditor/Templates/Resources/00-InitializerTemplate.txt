using UnityEngine;

#region Namespaces
namespace #NAMESPACE#.Systems {}
namespace #NAMESPACE#.Components {}
namespace #NAMESPACE#.Modules {}
namespace #NAMESPACE#.Features {}
namespace #NAMESPACE#.Markers {}
namespace #NAMESPACE#.Views {}
#endregion

namespace #NAMESPACE# {
    
    using TState = #STATENAME#;
    using ME.ECS;
    using ME.ECS.Views.Providers;
    using #NAMESPACE#.Modules;
    
    #if ECS_COMPILE_IL2CPP_OPTIONS
    [Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
     Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
     Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
    #endif
    public class #PROJECTNAME#Initializer : MonoBehaviour {

        private World<TState> world;

        public void Update() {

            if (this.world == null) {

                // Initialize world with 0.033 time step
                WorldUtilities.CreateWorld(ref this.world, 0.033f);
                {
                    // TODO: Add your modules here
                    // Ex: this.world.AddModule<TModule>();
                    this.world.AddModule<FPSModule>();
                    this.world.AddModule<StatesHistoryModule>();
                    this.world.AddModule<NetworkModule>();
                    
                    // Create new state
                    this.world.SetState(WorldUtilities.CreateState<TState>());
                    ComponentsInitializer<TState>.Init();
                    
                    // TODO: Initialize your custom state data here
                    // Ex: this.world.GetState().yourCustomParameter = yourValue;
                    
                    // TODO: Register view sources here or in each features/systems directly
                    // Based on render engine (Now we have support for GameObject Render, Particles Render, DrawMesh Render)
                    // You need to provide MonoBehaviourViewBase/GameObject, ParticleViewSourceBase or DrawMeshViewSourceBase as a prefab type
                    // Ex: var viewSourceId = this.world.RegisterViewSource(prefab);
   
                    // TODO: Add your features or systems here
                    // Ex: this.world.AddFeature<TFeature>(); or this.world.AddSystem<TSystem>();
                    // btw you can pass custom parameters into features like AddFeature<TFeature, TCustomParameters>(new TCustomParameters(...));
                }
                // Save initialization state
                this.world.SaveResetState();

            }

            if (this.world != null) {

                this.world.Update(Time.deltaTime);

            }

        }
        
        public void OnDestroy() {

            // Release world
            WorldUtilities.ReleaseWorld(ref this.world);

        }

    }
    
}

namespace ME.ECS {
    
    public static partial class ComponentsInitializer<TState> where TState : class, IState<TState>, new() {

        public static void DoInit() {
            
            ComponentsInitializer<TState>.Init(ref Worlds<TState>.currentWorld.GetStructComponents());
            
        }

        static partial void Init(ref ME.ECS.StructComponentsContainer<TState> structComponentsContainer);

    }

}