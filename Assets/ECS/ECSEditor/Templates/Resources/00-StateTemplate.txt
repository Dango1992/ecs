#if UNITY_MATHEMATICS
using RandomState = System.UInt32;
#else
using RandomState = UnityEngine.Random.State;
#endif

namespace #NAMESPACE# {

    using ME.ECS;
    
    public class #STATENAME# : IState<#STATENAME#> {

        public int entityId { get; set; }
        public Tick tick { get; set; }
        public RandomState randomState { get; set; }

        public FiltersStorage filters;
        public StructComponentsContainer<#STATENAME#> structComponents;
        
        // TODO: Place your custom data here
        
        public Storage storage;
        public Components<#STATENAME#> components;
        
        int IStateBase.GetHash() {

            // TODO: Return most unique hash here
            return this.components.Count;

        }

        void IState<#STATENAME#>.Initialize(IWorld<#STATENAME#> world, bool freeze, bool restore) {

            world.Register(ref this.filters, freeze, restore);
            world.Register(ref this.structComponents, freeze, restore);
            
            world.Register(ref this.storage, freeze, restore);
            world.Register(ref this.components, freeze, restore);
            
        }

        void IState<#STATENAME#>.CopyFrom(#STATENAME# other) {

            this.entityId = other.entityId;
            this.tick = other.tick;
            this.randomState = other.randomState;

            // TODO: Copy your custom data here

            this.filters.CopyFrom(other.filters);
            this.structComponents.CopyFrom(other.structComponents);
            
            this.storage.CopyFrom(other.storage);
            this.components.CopyFrom(other.components);

        }

        void IPoolableRecycle.OnRecycle() {
            
            WorldUtilities.Release(ref this.filters);
            WorldUtilities.Release(ref this.structComponents);
            
            // TODO: Release your custom data here
            
            WorldUtilities.Release(ref this.storage);
            WorldUtilities.Release(ref this.components);

        }

    }

}